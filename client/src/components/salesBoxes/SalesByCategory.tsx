import ResizableBox from "@/components/utils/ResizableBox";
import { ScaleAnimation } from "../../views/dashboard/Dashboard";
import { useGetCategoriesAndPricesQuery } from "@/state/api";
import { useMemo } from "react";
import Spinner from "../utils/Spinner";
import {
  ResponsiveContainer,
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Bar,
} from "recharts";
import { Box, Typography, useTheme } from "@mui/material";
/*
//////////////////////////////////////////////////////////

1) Product Category Sales Distribution:
	- Chart: Bar chart
	- Data Source: Products and Orders
	- Display: 
			Show the distribution of 
			sales across different product categories. 
			Each bar represents the percentage 
			or total revenue generated by each category. 
			Identify which categories are 
			the most popular among customers.
	- Formatting:
			Share the workload between front and back.
			Get the all the sales by category from
			the back and reduce all values to their
			totals on the front.
	- Request:
			Get the products from the order items lists
			and extract the number of sales for each
			product category
*/

const CustomTooltip = ({ active, payload, label, name }) => {
  const { palette } = useTheme();
  if (active && payload && payload.length) {
    return (
      <Box
        sx={{
          padding: "1rem",
          border: `1px solid ${palette.grey[700]}`,
          backgroundColor: palette.grey[800],
          color: palette.grey[300],
          borderRadius: "0.25rem",
        }}
      >
        <Typography sx={{ color: palette.grey[300] }}>{`${label}`}</Typography>
        <Typography
          sx={{ color: palette.primary.main }}
        >{`${name[0]} : ${payload[0].value}`}</Typography>
      </Box>
    );
  }

  return null;
};

export const SalesByCategory = ({
  gridArea,
  isAboveMediumScreens,
  startDate,
  endDate,
}) => {
  const { data, isLoading } = useGetCategoriesAndPricesQuery();
  const { palette } = useTheme();

  const totalsByCategory = useMemo(() => {
    if (!isLoading) {
      const formatted = data
        .flatMap((item) => item.items)
        .reduce((acc, item) => {
          const { itemPrice, category } = item;
          if (!acc[category]) {
            acc[category] = 0;
          }
          acc[category] += parseFloat(itemPrice);
          return acc;
        }, {});
      const result = Object.keys(formatted).map((category) => ({
        category,
        totalSales: formatted[category].toFixed(2),
      }));
      return result;
    }
  }, [data, startDate, endDate]);

  if (isLoading) return <Spinner />;
  console.log("👨‍💻 data:", totalsByCategory);

  return (
    <ScaleAnimation sx={{ height: "90%" }}>
      <ResizableBox gridArea="j" isAboveMediumScreens={isAboveMediumScreens}>
        <ResponsiveContainer width="99%" height="65%" debounce={1250}>
          <BarChart barGap={1} width={500} height={300} data={totalsByCategory}>
            <defs>
              <linearGradient id="colorRevenue" x1="0" y1="0" x2="0" y2="1">
                <stop
                  offset="35%"
                  stopColor={palette.primary[500]}
                  stopOpacity={0.6}
                />
                <stop
                  offset="95%"
                  stopColor={palette.primary[500]}
                  stopOpacity={0.3}
                />
              </linearGradient>
            </defs>
            <CartesianGrid vertical={false} stroke={palette.grey[800]} />
            <XAxis
              dataKey="category"
              axisLine={false}
              tickLine={false}
              style={{ fontSize: ".6em" }}
            />
            <YAxis
              yAxisId="right"
              orientation="right"
              axisLine={false}
              tickLine={false}
              style={{ fontSize: ".6em" }}
              domain={[0, 350000]}
            />
            <YAxis
              orientation="left"
              axisLine={false}
              tickLine={false}
              style={{ fontSize: ".6em" }}
              domain={[0, 700000]}
            />
            <Tooltip
              cursor={{
                fill: palette.grey[700],
              }}
              offset={50}
              content={
                <CustomTooltip
                  name={["Revenue"]}
                  active={undefined}
                  payload={undefined}
                  label={undefined}
                />
              }
            />
            <Bar dataKey="totalSales" fill="url(#colorRevenue)" />
          </BarChart>
        </ResponsiveContainer>
      </ResizableBox>
    </ScaleAnimation>
  );
};
